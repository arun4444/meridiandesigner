camera:
    type: perspective
    focal_length: [[16, 2], [20, 6]] # pairs of [zoom, focal len]
    vanishing_point: [-250, -250] # relative to center of screen, in pixels

lights:
    light1:
        type: directional
        direction: [.3, 1, -.5]
        diffuse: 1
        ambient: 0.5

sources:
    mapzen:
        type: GeoJSON
        url: https://tile.mapzen.com/mapzen/vector/v1/all/{z}/{x}/{y}.json
        url_params:
            api_key: mapzen-tDHBHDp
        tile_size: 512
        max_zoom: 16
        
styles:
    texture:
        base: polygons
        shaders:
            uniforms:
                u_texture: https://raw.githubusercontent.com/tangrams/texture-demos/gh-pages/img/uv-coords.png
                u_scale: 4. # number of times to repeat texture in a tile
            blocks:
                position: |
                    // make tile worldspace coordinates available to the global block
                    v_pos = modelPosition();
                global: |
                    varying vec4 v_pos;
                    vec4 TileTexture(sampler2D tex, float scale) {
                        // CONTROLS
                        // how smooth should the transition be?
                        // 0 = snapping, 1 = continuous smoothstep crossfade
                        float smoothness = .75;
                        vec2 IN = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z);
                        vec2 OUT = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z + 1.);
                        vec4 intex = texture2D(tex,fract(IN));
                        vec4 outtex = texture2D(tex,fract(OUT));
                        float texf;
                        //// linear transition
                        // texf = fract(u_map_position.z);
                        
                        //// use smoothstep instead
                        float tx = (1. - smoothness) * .5;
                        texf = smoothstep(tx, 1.-tx, fract(u_map_position.z));
                        return mix(intex, outtex, texf);
                    }
                color: |
                    color.rgb = TileTexture(u_texture,u_scale).rgb;
    texturelines:
        base: lines
        mix: texture
    grass:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                u_texture: ./img/grass4.png
    water:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                u_texture: ./img/wood-009.jpg
                # u_texture: https://tangrams.github.io/texture-demos/uv-coords.png
    dirt:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                u_texture: ./img/wood1.jpg
    stone:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                u_texture: ./img/stone.gif

layers:
    earth:
        data: { source: mapzen, layer: earth }
        draw:
            dirt:
                order: function() { return feature.sort_rank; }

    water:
        data: { source: mapzen, layer: water }
        draw:
            water:
                order: function() { return feature.sort_rank; }

    roads:
        data: { source: mapzen, layer: roads }
        filter: 
            - is_tunnel: no
            - not: { kind: [ferry] }
        draw:
            lines:
                order: function() { return feature.sort_rank; }
                color: black
                width: 1.5px
        highway:
            filter: { kind: highway }
            draw:
                lines:
                    width: 1.5px

        major_road:
            filter: { kind: major_road }
            draw:
                lines:
                    width: 1.5px
        minor_road:
            filter: { kind: minor_road }
            draw:
                lines:
                    width: 1.5px
        path:
            filter: { kind: path }
            draw:
                lines:
                    width: 1.5px


